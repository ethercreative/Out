{"version":3,"file":"out.min.js","sources":["../../../resources/js/out.js"],"sourcesContent":["/** global: Craft, Garnish, $ */\nconst prevLoad = window.onload;\n\nwindow.onload = function () {\n\tprevLoad && prevLoad();\n\n\tconst elementType = document.getElementById(\"elementType\");\n\n\tconst typeSource = document.querySelectorAll(\"[data-source-type]\");\n\tconst sourcesByType = {};\n\n\tfor (let i = 0, l = typeSource.length; i < l; ++i) {\n\t\tconst f = typeSource[i];\n\t\tconst t = f.dataset.sourceType;\n\n\t\tconst comment = document.createComment(t)\n\t\t\t, input   = f;\n\n\t\tinput.removeAttribute(\"style\");\n\n\t\tsourcesByType[t] = { comment, input };\n\n\t\tif (elementType.value !== t)\n\t\t\tinput.parentNode.replaceChild(comment, input);\n\t}\n\n\tlet currentActive = sourcesByType[elementType.value];\n\n\telementType.addEventListener(\"change\", e => {\n\t\tcurrentActive.input.parentNode.replaceChild(\n\t\t\tcurrentActive.comment,\n\t\t\tcurrentActive.input\n\t\t);\n\n\t\tcurrentActive = sourcesByType[e.target.value];\n\n\t\tcurrentActive.comment.parentNode.replaceChild(\n\t\t\tcurrentActive.input,\n\t\t\tcurrentActive.comment\n\t\t);\n\t});\n};\n\nconst h = function (tag = \"div\", attributes = {}, children = []) {\n\tconst elem = document.createElement(tag);\n\n\tfor (let [key, value] of Object.entries(attributes)) {\n\t\tif (!value) continue;\n\n\t\tif (typeof value === \"function\") {\n\t\t\tif (key === \"ref\") value(elem);\n\t\t\telse elem.addEventListener(key, value);\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (key === \"style\")\n\t\t\tvalue = value.replace(/[\\t\\r\\n]/g, \" \").trim();\n\n\t\telem.setAttribute(key, value);\n\t}\n\n\tif (!Array.isArray(children))\n\t\tchildren = [children];\n\n\tchildren.forEach(child => {\n\t\tif (!child) return;\n\n\t\ttry {\n\t\t\telem.appendChild(child);\n\t\t} catch (_) {\n\t\t\telem.appendChild(document.createTextNode(child));\n\t\t}\n\t});\n\n\treturn elem;\n};\n\nconst f = function (config) {\n\treturn h(\"div\", { class: \"field\" }, [\n\t\th(\"div\", { class: \"heading\" }, [\n\t\t\th(\"label\", { for: config.id }, config.label),\n\t\t\tconfig.hasOwnProperty(\"instructions\")\n\t\t\t\t? h(\"div\", { class: \"instructions\" }, h(\"p\", {}, config.instructions))\n\t\t\t\t: null\n\t\t]),\n\t\th(\"div\", { class: \"input\" }, [\n\t\t\th(config.tag, { id: config.id, ...config.attr }, config.children || null)\n\t\t]),\n\t]);\n};\n\nwindow.Out = {\n\n\t// Properties\n\t// =====================================================================\n\n\tfieldMap: {},\n\tintegrations: [],\n\n\tfields: {},\n\tactiveFieldId: null,\n\n\tmodal: null,\n\n\theadingInput: null,\n\ttwigInput: null,\n\tescapeInput: null,\n\tenabledInput: null,\n\n\tfieldSettings: null,\n\n\t// Functions\n\t// =====================================================================\n\n\tinit (fieldMap, integrations) {\n\t\tthis.fieldMap = fieldMap;\n\t\tthis.integrations = integrations;\n\n\t\tthis.fieldSettings = document.getElementById(\"fieldSettings\");\n\t\tthis.fields = JSON.parse(this.fieldSettings.value);\n\t\tif (Array.isArray(this.fields)) this.fields = {};\n\n\t\tconst btns = document.getElementById(\"outFields\").getElementsByTagName(\"button\");\n\t\tfor (let i = 0, l = btns.length; i < l; ++i)\n\t\t\tbtns[i].addEventListener(\"click\", this.edit.bind(this));\n\n\t\tthis.modal = new Garnish.Modal(\n\t\t\th(\"div\", { class: \"modal out--modal\" }, [\n\t\t\t\th(\"div\", { class: \"body\" }, [\n\t\t\t\t\tf({\n\t\t\t\t\t\tlabel: \"Enabled\",\n\t\t\t\t\t\tid: \"out_enabled\",\n\t\t\t\t\t\ttag: \"input\",\n\t\t\t\t\t\tattr: {\n\t\t\t\t\t\t\ttype: \"checkbox\",\n\t\t\t\t\t\t\tchecked: false,\n\t\t\t\t\t\t\tref: el => { this.enabledInput = el; }\n\t\t\t\t\t\t},\n\t\t\t\t\t}),\n\t\t\t\t\tf({\n\t\t\t\t\t\tlabel: \"Column Heading\",\n\t\t\t\t\t\tid: \"out_columnHeading\",\n\t\t\t\t\t\ttag: \"input\",\n\t\t\t\t\t\tattr: {\n\t\t\t\t\t\t\tclass: \"text fullwidth\",\n\t\t\t\t\t\t\tref: el => { this.headingInput = el; }\n\t\t\t\t\t\t},\n\t\t\t\t\t}),\n\t\t\t\t\tf({\n\t\t\t\t\t\tlabel: \"Twig\",\n\t\t\t\t\t\tid: \"out_twig\",\n\t\t\t\t\t\ttag: \"textarea\",\n\t\t\t\t\t\tattr: {\n\t\t\t\t\t\t\trows: 5,\n\t\t\t\t\t\t\tclass: \"text fullwidth\",\n\t\t\t\t\t\t\tref: el => { this.twigInput = el; }\n\t\t\t\t\t\t},\n\t\t\t\t\t\tinstructions: [\n\t\t\t\t\t\t\t\"Code to be executed in place of the fields output. You have access to the \",\n\t\t\t\t\t\t\th(\"code\", {}, \"element\"),\n\t\t\t\t\t\t\t\" variable as well as all global & Craft variables.\",\n\t\t\t\t\t\t],\n\t\t\t\t\t}),\n\t\t\t\t\tf({\n\t\t\t\t\t\tlabel: \"Escape Value\",\n\t\t\t\t\t\tid: \"out_escape\",\n\t\t\t\t\t\ttag: \"input\",\n\t\t\t\t\t\tattr: {\n\t\t\t\t\t\t\ttype: \"checkbox\",\n\t\t\t\t\t\t\tchecked: true,\n\t\t\t\t\t\t\tref: el => { this.escapeInput = el; }\n\t\t\t\t\t\t},\n\t\t\t\t\t\tinstructions: \"If checked the output of the column will be escaped\",\n\t\t\t\t\t})\n\t\t\t\t]),\n\t\t\t\th(\"div\", { class: \"footer\" }, [\n\t\t\t\t\th(\"div\", { class: \"buttons right\" }, [\n\t\t\t\t\t\th(\"button\", {\n\t\t\t\t\t\t\tclass: \"btn\",\n\t\t\t\t\t\t\tclick: this.cancel.bind(this),\n\t\t\t\t\t\t}, \"Cancel\"),\n\t\t\t\t\t\th(\"button\", {\n\t\t\t\t\t\t\tclass: \"btn submit\",\n\t\t\t\t\t\t\tclick: this.update.bind(this),\n\t\t\t\t\t\t}, \"Update\"),\n\t\t\t\t\t]),\n\t\t\t\t]),\n\t\t\t]),\n\t\t\t{ autoShow: false }\n\t\t);\n\t},\n\n\tedit (e) {\n\t\te.preventDefault();\n\t\tthis.setValues(e.target);\n\t\tthis.modal.show();\n\t},\n\n\t// Actions\n\t// =====================================================================\n\n\tsetValues (field) {\n\t\tconst fieldKey = field.dataset.key;\n\n\t\tthis.activeFieldId = fieldKey;\n\n\t\tif (this.fields.hasOwnProperty(fieldKey)) {\n\t\t\tconst p = this.fields[fieldKey];\n\n\t\t\tthis.enabledInput.checked = p.enabled;\n\t\t\tthis.headingInput.value = p.heading;\n\t\t\tthis.twigInput.value = p.twig;\n\t\t\tthis.escapeInput.checked = p.escape;\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst f = this.fieldMap[fieldKey];\n\n\t\tthis.enabledInput.checked = false;\n\t\tthis.headingInput.value = f.name;\n\t\tthis.twigInput.value = `{{ element.${f.handle} }}`;\n\t\tthis.escapeInput.checked = true;\n\t},\n\n\tupdate () {\n\t\tthis.fields[this.activeFieldId] = {\n\t\t\tenabled: this.enabledInput.checked,\n\t\t\theading: this.headingInput.value,\n\t\t\ttwig: this.twigInput.value,\n\t\t\tescape: this.escapeInput.checked,\n\t\t};\n\n\t\tthis.fieldSettings.value = JSON.stringify(this.fields);\n\n\t\tthis.modal.hide();\n\t},\n\n\tcancel () {\n\t\tthis.modal.hide();\n\t},\n\n};"],"names":["prevLoad","window","onload","elementType","document","getElementById","typeSource","querySelectorAll","sourcesByType","i","l","length","f","t","dataset","sourceType","comment","createComment","input","removeAttribute","value","parentNode","replaceChild","currentActive","addEventListener","e","target","h","tag","attributes","children","elem","createElement","Object","entries","key","replace","trim","setAttribute","Array","isArray","forEach","child","appendChild","_","createTextNode","config","class","for","id","label","hasOwnProperty","instructions","attr","Out","fieldMap","integrations","fieldSettings","fields","JSON","parse","this","btns","getElementsByTagName","edit","bind","modal","Garnish","Modal","enabledInput","el","headingInput","twigInput","escapeInput","cancel","update","autoShow","preventDefault","setValues","show","field","fieldKey","activeFieldId","p","checked","enabled","heading","twig","escape","name","handle","stringify","hide"],"mappings":"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"}